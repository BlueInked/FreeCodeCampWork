Sum All Numbers in an Array:

function sumAll(arr) {
  var min = Math.min(arr[0], arr[1]);
  var max = Math.max(arr[0], arr[1]);
  var addUp = 0;
  
  for (n = min; n <= max; n++){
    addUp +=n;
  }
  return addUp;
}

sumAll([1, 4]);


Two Diff Arrays:

function diffArray(arr1, arr2) {
return arr1.concat(arr2).filter //concat the two arrays
(item => !arr1.includes(item) || !arr2.includes(item)); 
  //filter out what is not (!) in arr1 or arr2...
  /* help with ES6 arrow functions on: 
  https://hacks.mozilla.org/2015/06/es6-in-depth-arrow-functions/ */
}

diffArray([1, 2, 3, 5], [1, 2, 3, 4, 5]);


To Roman Numerals : 

function convertToRoman(num) {
  //arrays for Roman Numerals and Decimal Numbers. 
  /*4, 9, 40, 90, 400, 900, and 4000 are included because how the numerals change with these numbers */
 var decNum = [1000, 900, 500, 400, 100, 90, 50, 40, 10, 9, 5, 4, 1];
 var romNum = ["M", "CM", "D", "CD", "C", "XC", "L", "XL", "X", "IX", "V", "IV", "I"];
 var toRom = "";
  
  //as i loops through until the number is at at the decimal number that it is  closest but not more than num.
  for( var i = 0; i < decNum.length; i++) {
    while (decNum[i] <= num) {
      toRom += romNum[i];
      num -= decNum[i];
    }
  }
 return toRom;
}

convertToRoman(36);


Where Art Thou :


function whatIsInAName(collection, source) {
  // What's in a name?
  var arr = [];
  // Only change code below this line
  
 var keys = Object.keys(source);
  // remove those that do not have the keys from source.
  arr = collection.filter(function(obj) {
    //Use method every() to check for every key from source.
    return keys.every(function(k) {
      // Check if the object has the property and the same value.
      return obj.hasOwnProperty(k) && obj[k] === source[k];
    });
  });
  
  // Only change code above this line
  
  return arr;
}

whatIsInAName([{ first: "Romeo", last: "Montague" }, { first: "Mercutio", last: null }, { first: "Tybalt", last: "Capulet" }], { last: "Capulet" });


Search and Replace:

function myReplace(str, before, after) {
  var i = str.indexOf(before);
  if (str[i] === str[i].toUpperCase()) {
      after = after.charAt(0).toUpperCase() + after.slice(1);
  }
   str = str.replace(before, after);
  return str;
}

myReplace("A quick brown fox jumped over the lazy dog", "jumped", "leaped");


Pig Latin:


function translatePigLatin(str) {
  var firstVowel = str.search(/[aeiou]/);
  
  return firstVowel === 0 ? str + 'way' : str.substr(firstVowel) + str.substr(0, firstVowel) + 'ay';
}

translatePigLatin("consonant");


DNA Pairs:


function pairElement(str) {
  var dnaPairs = [];
   var search = function(dna) {
    switch (dna) {
      case "G":
        dnaPairs.push(["G","C"]);
        break;
      case "C":
        dnaPairs.push(["C","G"]);
        break;
      case "A":
        dnaPairs.push(["A","T"]);
        break; 
      case "T":
        dnaPairs.push(["T","A"]);
        break;  
    }
};

 for (var i = 0; i < str.length; i++) {
    search(str[i]);
  }

  return dnaPairs;
}

pairElement("GCG");


Missing Letters:


function fearNotLetter(str) {
  var letterPlace = str.split("").map(function(char, index) {
    return str.charCodeAt(index);
  });
  
  for (var i = 1; i < letterPlace.length; i++) {
    if (letterPlace[i-1] !== letterPlace[i]-1) {
      return String.fromCharCode(letterPlace[i]-1);
    }
  }

  return undefined;
}
fearNotLetter("abce");


Boo Who:

function booWho(bool) {
  // What is the new fad diet for ghost developers? The Boolean.
  return typeof bool === 'boolean';
}

booWho(false);


Sorted Union:

 function uniteUnique() {
  var unitedArr = [];
  var i = 0;
  while (arguments[i]){
    unitedArr = unitedArr.concat(arguments[i]); i++;
  }
  uniqueArray = unitedArr.filter(function(item, pos) {
    return unitedArr.indexOf(item) == pos;
  });
  return uniqueArray;
}


uniteUnique([1, 3, 2], [5, 2, 1, 4], [2, 1]);


Converting to HTML entities:

function convertHTML(str) {
  // &colon;&rpar;
  var piece = str.split(""); //piece because breaks the sentence to pieces
  
 for (var i = 0; i < piece.length; i++) {
    switch (piece[i]) {
      case '>':
        piece[i] = '&gt;';
        break;
      case "'":
        piece[i] = '&apos;';
        break;
      case '<':
        piece[i] = '&lt;';
        break;
      case '"':
        piece[i] = '&quot;';
        break;
      case '&':
        piece[i] = "&amp;";
        break;
    }
  }

  piece = piece.join('');
  return piece;
}
convertHTML("Dolce & Gabbana");



Spinal Tap Case:


function spinalCase(str) {
  // "It's such a fine line between stupid, and clever."
  // --David St. Hubbins
  return str.replace(/([a-z])([A-Z])/g, '$1 $2').replace(/\W|_/g,'-').toLowerCase();
}

spinalCase('This Is Spinal Tap');


Sum Odd Fibonacci Numbers:

function sumFibs(num) {
    var prevNum = 0;
    var currNum = 1;
    var addedFibs = 0;
    while (currNum <= num) {
        if (currNum % 2 !== 0) {
            addedFibs += currNum;
        }

        currNum += prevNum;
        prevNum = currNum - prevNum;
    }

    return addedFibs;
}
sumFibs(4);


Sum All Prime Numbers:


function sumPrimes(num) {
  var result = 0;
   //(https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes)
  //(http://stackoverflow.com/questions/11966520/how-to-find-prime-numbers-between-0-100)
  //Find the Primes...the above were helpful
  function getPrimes(max) {
    var sieve = [];
    var p;
    var n;
    var primes = [];
    for (p = 2; p <= max; ++p) {
      if (!sieve[p]) {
        primes.push(p);
        for (n = p << 1; n <= max; n += p) {
          sieve[n] = true;
        }
      }
    }

    return primes;
  }

  //Now to Add the Primes
  var primes = getPrimes(num);
  for (var m = 0; m < primes.length; m++) {
    result += primes[m];
  }

  return result;
}


Smallest Common Multiple:

//noprotect
function smallestCommons(arr) {
  function isValidMultiple(n, min, max) {
    for (var i = min; i < max; i++) {
      if (n % i !== 0) {
        return false;
      }
    }
    
    return true;
  }
  
  var min = Math.min(arr[0], arr[1]);
  var max = Math.max(arr[0], arr[1]);  
  var multiple = max;
  
  while (!isValidMultiple(multiple, min, max)) {
    multiple += max;
  }
  
  return multiple;
}




sumPrimes(10);


Finders Keeper:

//doing it wrong and misreading the instructions helped me to do it right

function findElement(arr, func) {
  var filtered = arr.filter(func);
  return filterArr[0];
}
findElement([1, 2, 3, 4], function(num){ return num % 2 === 0; });


Drop It:

//at first my solution was broken and eneded up being an infinite loop after looking at the hints and reading the docs on shift I wokred it differently.

function dropElements(arr, func) {
  // Drop them elements.
  while(arr.length > 0 && !func(arr[0])) {
    arr.shift();
  }
  return arr;
}

dropElements([1, 2, 3], function(n) {return n < 3; });


Steamroller:

//after the intermediate solution explantion, after I hit too many walls

function steamrollArray(arr) {
  // I'm a steamroller, baby
 let flatten = [].concat(...arr);
  return flatten.some(Array.isArray) ? steamrollArray(flatten) : flatten;
}


steamrollArray([1, [2], [3, [[4]]]]);


Binary Agents:

//hint look up .map and parseInt on MDN or Google

function binaryAgent(str) {
   return str.split(" ").map(function(biNum) {
    return String.fromCharCode(parseInt(biNum, 2));
  }).join("");

}
binaryAgent("01000001 01110010 01100101 01101110 00100111 01110100 00100000 01100010 01101111 01101110 01100110 01101001 01110010 01100101 01110011 00100000 01100110 01110101 01101110 00100001 00111111");


Everything Be True:

function truthCheck(collection, pre) {
  //Is everyone being true?
  return collection.every(function (element) {
    return element.hasOwnProperty(pre) && Boolean(element[pre]);
  });
}

truthCheck([{"user": "Tinky-Winky", "sex": "male"}, {"user": "Dipsy", "sex": "male"}, {"user": "Laa-Laa", "sex": "female"}, {"user": "Po", "sex": "female"}], "sex");
