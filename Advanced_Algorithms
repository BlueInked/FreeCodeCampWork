Validate U.S. Telephone Numbers:


function telephoneCheck(str) {
  // Good luck!
  var regexNum = /^(1\s?)?(\(\d{3}\)|\d{3})[\s\-]?\d{3}[\s\-]?\d{4}$/;
   return regexNum.test(str);
}


telephoneCheck("555-555-5555");


Record Collection:


// Setup
var collection = {
    "2548": {
      "album": "Slippery When Wet",
      "artist": "Bon Jovi",
      "tracks": [ 
        "Let It Rock", 
        "You Give Love a Bad Name" 
      ]
    },
    "2468": {
      "album": "1999",
      "artist": "Prince",
      "tracks": [ 
        "1999", 
        "Little Red Corvette" 
      ]
    },
    "1245": {
      "artist": "Robert Palmer",
      "tracks": [ ]
    },
    "5439": {
      "album": "ABBA Gold"
    }
};
// Keep a copy of the collection for tests
var collectionCopy = JSON.parse(JSON.stringify(collection));
\// Only change code below this line
function updateRecords(id, prop, value) {
  if (prop !== "tracks" && value !== ""){
    collection[id][prop] = value;
  }  
  else if (prop === "tracks" && collection[id][prop] === undefined) {
    collection[id][prop] = [];
    console.log(prop);
    collection[id][prop].push(value);
  }
  else if (value === "") {
    delete collection[id][prop];
  }
  else {
  	collection[id][prop].push(value);
  }
  return collection;
}

// Alter values below to test your code
updateRecords(5439, "tracks", "Take a Chance on Me");


Symmetric Difference:

function sym(args) {
//makes the arguments into arrays
  var arr = Array.from(arguments);
  arr = arr.reduce(function(a, b) {
  // in a but not in b and viceversa
    var aNotB = a.filter(function(val) { return !b.includes(val); });
    var bNotA = b.filter(function(val) { return !a.includes(val); });
    //makes one array
    return aNotB.concat(bNotA);
  });
  return arr.filter(function(value, index, self) {
    return self.indexOf(value) === index;
  });
}


Exact Change : 

var denom = [
  { name: 'ONE HUNDRED', val: 100.00},
  { name: 'TWENTY', val: 20.00},
  { name: 'TEN', val: 10.00},
  { name: 'FIVE', val: 5.00},
  { name: 'ONE', val: 1.00},
  { name: 'QUARTER', val: 0.25},
  { name: 'DIME', val: 0.10},
  { name: 'NICKEL', val: 0.05},
  { name: 'PENNY', val: 0.01}
];

function checkCashRegister(price, cash, cid) {
  var change = cash - price;

  var drawer = cid.reduce(function(acc, curr) {
    acc.total += curr[1];
    acc[curr[0]] = curr[1];
    return acc;
  }, {total: 0});
  
  //insufficient funds
   if (drawer.total < change) {
    return 'Insufficient Funds';
  }
  //no more in drawer after transaction
   if (drawer.total === change) {
    return 'Closed';
  }

   var changeArr = denom.reduce(function(acc, curr) {
    var value = 0;
     
   while (drawer[curr.name] > 0 && change >= curr.val) {
      change -= curr.val;
      drawer[curr.name] -= curr.val;
      value += curr.val;
   
      change = Math.round(change * 100) / 100;
    }
     
    if (value > 0) {
        acc.push([ curr.name, value ]);
    }
    return acc;
     }, []);
  
   if (changeArr.length < 1 || change > 0) {
    return "Insufficient Funds";
  }
  // Here is your change, ma'am.
  return changeArr;
}

             
// Example cash-in-drawer array:
// [["PENNY", 1.01],
// ["NICKEL", 2.05],
// ["DIME", 3.10],
// ["QUARTER", 4.25],
// ["ONE", 90.00],
// ["FIVE", 55.00],
// ["TEN", 20.00],
// ["TWENTY", 60.00],
// ["ONE HUNDRED", 100.00]]

checkCashRegister(19.50, 20.00, [["PENNY", 1.01], ["NICKEL", 2.05], ["DIME", 3.10], ["QUARTER", 4.25], ["ONE", 90.00], ["FIVE", 55.00], ["TEN", 20.00], ["TWENTY", 60.00], ["ONE HUNDRED", 100.00]]);


Inventory Update

function updateInventory(arr1, arr2) {
    arr2.forEach(function(newItem, newPos, newArr) {
      arr1.forEach(function(currentItem, currentPos, currentArr) {
        if (currentItem[1] === newItem[1]) {
          currentItem[0] += newItem[0];
          arr2.splice(newPos, 1);
        }
      });
    });
  
  return arr1.concat(arr2).sort(function(a, b) {
    if (a[1] < b[1]) {
      return -1;
    } else if (a[1] > b[1]) {
      return 1;
    } else {
      return 0;
    }
  });
}


// Example inventory lists
var curInv = [
    [21, "Bowling Ball"],
    [2, "Dirty Sock"],
    [1, "Hair Pin"],
    [5, "Microphone"]
];

var newInv = [
    [2, "Hair Pin"],
    [3, "Half-Eaten Apple"],
    [67, "Bowling Ball"],
    [7, "Toothpaste"]
];

updateInventory(curInv, newInv);
